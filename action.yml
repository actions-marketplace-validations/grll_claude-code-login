name: 'Claude Code OAuth Login'
description: 'Authenticate with Claude Code using OAuth 2.0 flow'
author: 'Guillaume Raille <guillaume.raille@gmail.com>'

inputs:
  code:
    description: 'Authorization code from Claude (leave empty for step 1)'
    required: false
    default: ''

outputs:
  success:
    description: 'Whether the OAuth login was successful'
    value: ${{ steps.oauth.outputs.success }}
  expires_at:
    description: 'Token expiration timestamp (milliseconds)'
    value: ${{ steps.oauth.outputs.expires_at }}

runs:
  using: 'composite'
  steps:
    - name: Setup Bun
      uses: oven-sh/setup-bun@v2
      with:
        bun-version: latest

    - name: Install dependencies
      shell: bash
      run: bun install

    - name: Run OAuth Flow
      id: oauth
      shell: bash
      run: |
        if [ -z "${{ inputs.code }}" ]; then
          echo "üîó **STEP 1: Generate Login URL**"
          echo ""
          echo "Running OAuth URL generation..."
          echo ""
          
          # Generate the login URL
          LOGIN_URL=$(bun run index.ts)
          
          echo "‚úÖ **Login URL Generated Successfully!**"
          echo ""
          echo "üìã **Next Steps:**"
          echo "1. Click or copy this URL and open it in your browser:"
          echo "   üëâ $LOGIN_URL"
          echo ""
          echo "2. Sign in to Claude and authorize the application"
          echo ""
          echo "3. After authorization, you'll be redirected to a page with an authorization code"
          echo "   The URL will look like: https://console.anthropic.com/oauth/code/callback?code=YOUR_CODE_HERE"
          echo ""
          echo "4. Copy the authorization code (the part after 'code=')"
          echo ""
          echo "5. Run this GitHub Action again with the code:"
          echo "   - Go to Actions tab ‚Üí Claude Code OAuth Login ‚Üí Run workflow"
          echo "   - Paste the authorization code in the 'code' input field"
          echo "   - Click 'Run workflow'"
          echo ""
          echo "üîÑ **Ready for Step 2!**"
          echo "set-output name=success::pending" >> $GITHUB_OUTPUT
        else
          echo "üîê **STEP 2: Exchange Code for Tokens**"
          echo ""
          echo "Authorization code provided: ${MASK_CODE}"
          echo ""
          
          # Exchange the code for tokens
          bun run index.ts "${{ inputs.code }}"
          
          # The script itself handles the GitHub Actions outputs
        fi
      env:
        MASK_CODE: ${{ inputs.code != '' && '***REDACTED***' || 'Not provided' }}

branding:
  icon: 'key'
  color: 'blue'